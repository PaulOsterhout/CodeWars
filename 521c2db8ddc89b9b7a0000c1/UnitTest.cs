using System;
using System.Linq;
using NUnit.Framework;

namespace CodeWars.Kata_521c2db8ddc89b9b7a0000c1
{
	[TestFixture]
	public class UnitTest
	{
		[Test]
		public void SnailTest1()
		{
			int[][] array =
			{
				new []{1, 2, 3},
				new []{4, 5, 6},
				new []{7, 8, 9}
			};
			var r = new[] { 1, 2, 3, 6, 9, 8, 7, 4, 5 };
			Test(array, r);
		}

		[Test]
		public void SnailTest2()
		{
			int[][] array =
			{
				new []{704,465,523,889,333,475,877,194,228,343,990,156,463,385,919,17,698,736},
				new []{518,729,624,5,125,644,902,391,514,782,168,583,838,881,203,314,653,474},
				new []{478,757,680,465,963,698,191,511,791,226,936,413,810,213,488,858,770,339},
				new []{976,699,341,880,988,942,962,96,26,646,505,110,954,149,733,446,539,942},
				new []{56,54,766,926,815,615,853,676,455,101,972,955,95,981,111,865,338,954},
				new []{134,599,769,738,503,868,673,545,6,682,272,788,681,365,675,547,803,717},
				new []{573,51,885,726,28,312,488,862,124,71,551,525,999,90,812,780,313,940},
				new []{173,318,551,899,254,270,609,171,405,668,420,607,281,549,178,395,293,288},
				new []{69,408,572,458,251,641,744,602,995,482,683,183,976,901,53,735,374,485},
				new []{166,674,797,616,117,857,908,821,442,517,791,2,347,605,797,525,712,905},
				new []{369,715,68,910,155,653,276,128,488,222,692,520,555,547,176,694,229,619},
				new []{491,454,291,715,551,430,200,227,812,993,135,79,387,452,190,148,367,659},
				new []{418,256,519,145,341,990,370,687,129,923,963,245,827,654,376,179,34,258},
				new []{614,654,165,638,711,929,841,283,993,410,836,240,331,407,180,517,277,973},
				new []{100,346,114,302,346,865,302,278,265,568,166,482,704,208,419,932,534,714},
				new []{495,780,546,591,304,58,997,960,851,890,592,556,65,311,378,403,79,688},
				new []{144,313,308,300,337,434,665,274,117,512,706,628,822,399,873,467,23,497},
				new []{428,510,42,57,306,386,14,412,686,709,503,856,105,301,129,731,788,222}
			};
			var r = new[] {};
			Test(array, r);
		}

		public string Int2dToString(int[][] a)
		{
			return $"[{string.Join("\n", a.Select(row => $"[{string.Join(",", row)}]"))}]";
		}

		public void Test(int[][] array, int[] result)
		{
			var text = $"{Int2dToString(array)}\nshould be sorted to\n[{string.Join(",", result)}]\n";
			Console.WriteLine(text);
			Assert.AreEqual(result, SnailSolution.Snail(array));
		}

		[Test]
		public void ChangeDirections1()
		{
			int xDir = 1, yDir = 0;

			void Change()
			{
				int temp = xDir;
				xDir = yDir * -1;
				yDir = temp * 1;
			}

			Assert.AreEqual(1, xDir);
			Assert.AreEqual(0, yDir);
			Change();
			Assert.AreEqual(0, xDir);
			Assert.AreEqual(1, yDir);
			Change();
			Assert.AreEqual(-1, xDir);
			Assert.AreEqual(0, yDir);
			Change();
			Assert.AreEqual(0, xDir);
			Assert.AreEqual(-1, yDir);
			Change();
			Assert.AreEqual(1, xDir);
			Assert.AreEqual(0, yDir);
		}

		[Test]
		public void ChangeDirections2()
		{
			int xDir = 1, yDir = 0;

			void Change()
			{
				if (xDir == 1)
				{
					xDir = 0;
					yDir = 1;
				}
				else if (yDir == 1)
				{
					xDir = -1;
					yDir = 0;
				}
				else if (xDir == -1)
				{
					xDir = 0;
					yDir = -1;
				}
				else
				{
					xDir = 1;
					yDir = 0;
				}
			}

			Assert.AreEqual(1, xDir);
			Assert.AreEqual(0, yDir);
			Change();
			Assert.AreEqual(0, xDir);
			Assert.AreEqual(1, yDir);
			Change();
			Assert.AreEqual(-1, xDir);
			Assert.AreEqual(0, yDir);
			Change();
			Assert.AreEqual(0, xDir);
			Assert.AreEqual(-1, yDir);
			Change();
			Assert.AreEqual(1, xDir);
			Assert.AreEqual(0, yDir);
		}
	}
}